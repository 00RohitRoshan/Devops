
---------------------------3----------------------------
[Version Control]

-------------------------------7---------------------------
[Container with Docker]


[6/17] Lesson74 Main Docker Commands
docker pull <image name>
docker image
docker run <image name>
docker ps
docker stop <cid>
docker ps -a
docker start <cid>

Container Port vs Host Port
- How two containers listening to same port doesn't have conflict ?
- Explain Port Binding.
docker run -p<host port>:<container port> -d <image name> 
- Why we need to run the container in detached mode ?

[7/17] lesson75 debugging Docker containers
docker exec -it <cid> /bin/bash
docker logs <cid> or docker logs <NAMES>
docker run --name <custom NAMES> <Image>

[8/17] Lesson76 Demo project - Demo Overview
Workflow with Docker

[9/17] Lesson77 Demo project - Developing with Docker
Frontend,Backend - Local ; MongoDB,Mongo Express - Container
Docker Network
Running MongoDB container
Environment Variables in MongoDB Container
docker run -p<Host port>:<container port> -d -e MONGO_INITDB_ROOT_USERNAME=<USERNAME> -e MONGO_INITDB_ROOT_PASSWORD=<PASS> --net <docker network> <image>
docker run -d \
Running Mongo Express container
Environment Variables in Mongo Express Container
docker logs -f
docker logs | tail

[10/17] Demo Project - Running multiple Services with Docker Compose
Docker Compose yaml for mongodb
Docker Compose yaml for mongoexpress
- Docker Compose takes care of creating a common network for MongoDB and Mongo-Express in a single compose file?
- Will it create a common network for multiple compose files in a single command?
- For which cases docker compose creates a common network?
```
version: '3'
services:
	mongodb:
		image: mongo
		ports:
		- 27017:27017
		environment:
		- MONGO_INITDB_ROOT_USERNAME=admin
		- MONGO_INITDB_ROOT_PASSWORD=password
	mongo-express:
		image: mongo-express
		ports:
		- 8080:8081
		environment:
		- ME_CONFIG_MONGODB_ADMINUSERNAME=admin
		- ME_CONFIG_MONGODB_ADMINPASSWORD=password
		- ME_CONFIG_MONGODB_SERVER=mongodb
```
docker-compose -f <compose file> up
docker-compose -f <compose file> down
how to keep the network created by docker-compose on docker-compose down command?
Other ways around to do so?

[11/17] Lesson79 Demo Project - Buildong Image with Dockerfile
What is a Dockerfile?
Explain the commands in Dockerfile, FROM, ENV, RUN, COPY, CMD, and others.
What are the environment variables are available for dockerfile?
Why is it prefereble not to provide user and password in it ?
What is the difference in RUN and CMD?
Most commonly used run commands in dockerfile?
Comand to build docker image?
Difference between dockerfile and image?
How to verify the created container image?
Commands to delete docker image?
On pushing a docker image to registry does it pushes all the required files to it?

[12/17] Lesson80 Docker Registry on AWS
Docker private repository
Registry options
build & tag an image
docker login
docker push

[13/17] Lesson81 Demo Project - Deploy the Application
Image from a private repository AWS ECR
Deploy multiple containers
Deployment Server

[14/17] Lesson82 Docker Volumes
When do we need Docker Volumes?
What is Docker Volumes
3 Volume Types
why prefer named volumes over any type of volumes in production in docker ?

[15/17] Lesson83 Demo project - Docker Volumes
Implement Docker Volumes in docker-compose file for mongoDB.

[16/17] Lesson84 Push/Pull Nexus Repository

[17/17] Lesson84 Run Nexus as Docker Container
why ?


[Advanced]
Docker Swarm vs kubernetes
Docker service
Overlay networks
Load Balancing in Docker
Docker secrets
How do I pass arguments to a container at runtime?
Why do I need to pass arguments to a container at runtime?

------------------------8---------------------------
[Build Automation - CICD with Jenkins]

[1/18] Overview

[2/18] 

------------------------9---------------------------
[AWS Services]

-----------------------10--------------------------
[Container Orchestration with Kubernetes]

[1/25] Lesson118 Overview
Introduction to K8s
Main K8s Components
Minikube & Kubectl - Local Setup
Main Kubectl commands
YAML Configuration File
Organize components - Namespaces
Configure connectivity - Services
Make App available from outside - Ingress
Persist data - Volumes
ConfigMap & Secrets as Volume Types
Deploy stateful Apps - StateefulSet
Package Manager of K8s - Helm
Extending the K8s API - Operator
Microservices in Kubernetes
Production and Security best practices
Authorization in Kubernetes - Role Based Access Control(RBAC)

[2/25] Lesson119 Introduction to K8s
What features do orchestration tools offer ?
- High Availability / No Downtime
- Scalability / High Performance
- Disaster recovery / Backup and Restor

[3/25] Lesson120 Main k8s Components
Nodes & Pods
Services & Ingress
Configmap & Secret
Volumes
Deployment & StatefulSet

[4/25] Lesson121 K8s Architecture
Master - Node
Node Proceses
Worker machine in K8s cluster
- Container Runtime
- Kubelet
- Kube Proxy
Master Node in K8s
- Api Server
- Scheduler
- Controller Manager
- ETCD

[5/25] Lesson122 Minikube & Kubectl - Local Setup
Minikube - 1 node K8s Cluster
Kubectl  - Command line tool for k8s cluster

[6/25] Lesson123 K8s CLI-Main Kubectl Commands
CRUD commands :
kubectl create / edit / delete deployment [name]
Status of different K8s components :
kubectl get node/pod/services/replicaset/deployment
Debugging pods :
kubectl logs [name]
kubectl exec -it [name] --bin/bash

kubectl create deployment NAME --image=image [--dry-run] [options]

Describe kubernetes replicaset in between pod and deployment.

deployment->Replicaset->Pod->Container

create deployment
- kubectl aply -f [deployment config file name]

[7/25] lesson124 Yaml Configfile
3 Parts of K8s Configuration YAML
- Matadata
- Specification
- Status (Automatically generated and added by K8s)

To get more infos about pods
- Kubectl get pod -o wide

Get deployment config from ETCD
- Kubectl get deployment [name] -o yaml

delete deployment
- kubectl delete -f [Configfile]

[8/25] lesson125 Demo project : Complete App Setup with K8s Components
Wtch it later

[9/25] Lesson126 K8s Namespaces
- What is K8s Namespace?
: Organize resources in Namespaces
: Virtual cluster inside a Cluster
- What are the use cases?
- How Namespaces work and how to use it?

- Kubectl get Namespace
4 Namespace per Default
- Default
- kube-node-lease
- kube-public
- kube-system
- kubernetes-dashboard  (only with Minikube)

### default 
- resources I create are located here (without namespace)
Create namespace
- Kubectl create namespace [name]
Create namespace with a Configuration file.

### Kube-node-lease
- heartbeats of Nodes
- each node has associated lease object in Namespace
- determines the Availability of a node

### kube-public
- publicly accessible data
- A Configmap, which contains cluster information
- ` kubectl cluster-info `

### kube-system
- Do NOT create or modify in kube-system
- System processes
- Master and kubectl processes

Divide resources 
1 Divide teams by Name 
2 Divide Staging and Development
3 Divide Blue/Green deployment application common resources
4 Access and resources limits on Namespaces 

Characteristics of Namespaces
- You can't access most of the resources from another Namespace
	- Each NS must define own Configmap/Secret 
- Access service in another Namespace
	- DB/elastic Search/Nginx
- Components, which can't be created within a Namespace
	- Live globally in a cluster
	- can't isolate
	- Volume/node
	- Kebectl api-resources --namespaced=false

Create component in a Namespace
- kubectl apply -f [deployment yaml] --namespace=[name]

Change active namespace
- with kubens
- kubens [namespace name]

[10/25] Lesson127 Kubernetes Services
- What is a kubernetes Service and when we need it?
- Diferent Service types in kubernetes

------------------------12--------------------------
[Infrastructure as Code with Terraform]

------------------------14--------------------------
[Automation with Python]

------------------------16-------------------------
[Monitoring with Prometheus]







































